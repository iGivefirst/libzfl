zfl(7)
======


NAME
----
zfl - ZeroMQ Function Library


SYNOPSIS
--------
*#include <zfl.h>*

*cc* ['flags'] 'files' *-lzfl* ['libraries']


DESCRIPTION
-----------

Scope and Goals
~~~~~~~~~~~~~~~

ZFL is the 0MQ Function Library, a thin portability & function library for ZeroMQ applications in C/C++. It is written as clear readable C classes, portable to all 0MQ platforms, and licensed under the LGPL.

The main goal is to allow the construction of industrial-scale 0MQ services and devices that integrate properly with the operating system, while staying 100% portable. ZFL acts as a primary abstraction layer on top of the 0MQ API, mainly for C applications but also for other languages. ZFL is inspired by the iMatix Standard Function Library (SFL), and borrows liberally from it. See http://legacy.imatix.com/html/sfl/.

ZFL is meant to be lightweight, consistent, class-based, minimalistic, highly efficient, and aimed at making it faster and easier to develop realistic, secure, and portable 0MQ devices and applications.

Ownership and License
~~~~~~~~~~~~~~~~~~~~~

ZFL is maintained by Pieter Hintjens and Martin Hurton. Its other authors and contributors are listed in the AUTHORS file. It is held by the ZeroMQ organization at github.com.

The authors of ZFL grant you free use of this software under the terms of the GNU Lesser General Public License (LGPL). For details see the files `COPYING` and `COPYING.LESSER` in this directory.

Contributing
~~~~~~~~~~~~

To submit an issue use the [issue tracker](http://github.com/zeromq/zfl/issues). All discussion happens on the [zeromq-dev](zeromq-dev@lists.zeromq.org) list or #zeromq IRC channel at irc.freenode.net.

The proper way to submit patches is to clone this repository, make your changes, and use git to create a patch. See http://www.zeromq.org/docs:contributing. All contributors are listed in AUTHORS.

All classes are maintained by a single person, who is the responsible editor for that class and who is named in the header as such. This is usually the originator of the class. When several people collaborate on a class, one single person is always the lead maintainer and the one to blame when it breaks.

The general rule is, if you contribute code to ZFL you must be willing to maintain it as long as there are users of it. Code with no active maintainer will in general be deprecated and/or removed.

USING ZFL
---------

Building and Installing
~~~~~~~~~~~~~~~~~~~~~~~

ZFL uses autotools for packaging. To build from git (all example commands are for Linux):
----
git clone git://github.com/zeromq/zfl.git
cd zfl
sh autogen.sh
./configure
make all
sudo make install
sudo ldconfig
----
You will need the pkg-config, libtool, and autoreconf packages. Set the LD_LIBRARY_PATH to /usr/local/libs unless you install elsewhere.

After building, you can run the ZFL selftests:
----
cd src
./zfl_selftest
----

Linking with an Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Include `zfl.h` in your application and link with libzfl. Here is a typical gcc link command:
----
gcc -lzfl -lzmq myapp.c -o myapp
----
You should read `zfl.h`. This file includes `zmq.h` and the system header files that typical 0MQ applications will need. The provided 'c' shell script lets you write simple portable build scripts:
----
c -lzfl -lzmq -l myapp
----

The Class Model
~~~~~~~~~~~~~~~

ZFL consists of classes, each class consisting of a .h and a .c. Classes may depend on other classes.

`zfl.h` includes all classes header files, all the time. For the user, ZFL forms one single package. All classes start by including `zfl.h`. All applications that use ZFL start by including `zfl.h`. `zfl.h` also defines a limited number of small, useful macros and typedefs that have proven useful for writing clearer C code.

The canonical example for ZFL style is the zfl_base class, which defines the template for all other classes. The nomenclature for all classes is consistent. We use zfl_base as an example:

* Source files: zfl_base.c, zfl_base.h
* Methods: zfl_base_test, zfl_base_print, ...

All classes are based on a flat C class system and follow these rules:

* Class typedef: `zfl_base_t`
* Constructor: `zfl_base_new`
* Destructor: `zfl_base_destroy`
* Property methods: `zfl_base_property_set`, `zfl_base_property`
* Class structures are private (defined in the .c source but not the .h)
* Properties are accessed only via methods named as described above.
* In the class source code the object is always called `self`.
* The constructor may take arbitrary arguments, and returns NULL on failure, or a new object.
* The destructor takes a pointer to an object reference and nullifies it.

Return values for methods are:

* For methods that return an object reference, either the reference, or NULL on failure.
* For methods that signal success/failure, a return value of 0 means sucess, -1 failure.

Private/static functions in a class are named `s_functionname` and are not exported via the header file.

All classes have a test method called `zfl_classname_test`.

ZFL Classes
~~~~~~~~~~~

These are the existing ZFL classes:

* zfl_base - base class for ZFL
* zfl_blob - binary long object
* zfl_config - work with configuration files
* zfl_device - configure a device or device socket
* zfl_hash - expandable hash table container
* zfl_list - singly-linked list container
* zfl_msg - multipart 0MQ message
* zfl_rpcd - server side reliable RPC
* zfl_rpc - client side reliable RPC
* zfl_thread - work with operating system threads

Predefined Macros
~~~~~~~~~~~~~~~~~

The file zfl_prelude.h defines a number of macros including these:

----
#define FOREVER             for (;;)            //  FOREVER { ... }
#define until(expr)         while (!(expr))     //  do { ... } until (expr)
#define streq(s1,s2)        (!strcmp ((s1), (s2)))
#define strneq(s1,s2)       (strcmp ((s1), (s2)))
#define strused(s)          (*(s) != 0)
#define strnull(s)          (*(s) == 0)
#define strclr(s)           (*(s) = 0)
#define strlast(s)          ((s) [strlen (s) - 1])
#define strterm(s)          ((s) [strlen (s)])

#define tblsize(x)          (sizeof (x) / sizeof ((x) [0]))
#define tbllast(x)          (x [tblsize (x) - 1])

#define randomof(num)       (int) (((float) num) * rand () / (RAND_MAX + 1.0))
#define randomize()         srand ((uint) apr_time_usec (apr_time_now ()))

#if (!defined (MIN))
#   define MIN(a,b)         (((a) < (b))? (a): (b))
#   define MAX(a,b)         (((a) > (b))? (a): (b))
#endif

//- Assertion that pointer value is as expect -------------------------------

#define assert_eq(value,const) \
if ((value) != (const)) {\
    printf ("Assertion failed, expected=%d actual=%d", (const), (value));\
    assert ((value) == (const));\
}

//- Boolean operators and constants -----------------------------------------

#if (!defined (TRUE))
#    define TRUE        1               //  ANSI standard
#    define FALSE       0
#endif
----

Error Handling
~~~~~~~~~~~~~~

Functions that create or search objects return object references success and
NULL on failure.  Functions that perform work return 0 on success and -1 on
failure.


LANGUAGE BINDINGS
-----------------

The ZFL library provides interfaces suitable for calling from programs in any
language; this documentation documents those interfaces as they would be used
by C programmers.
