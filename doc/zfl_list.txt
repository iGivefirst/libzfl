zfl_list(7)
==========


NAME
----
zfl_list - singly-linked list container


SYNOPSIS
--------
----
zfl_list_t *
    zfl_list_new (void);
void
    zfl_list_destroy (zfl_list_t **self_p);
void *
    zfl_list_first (zfl_list_t *self);
void
    zfl_list_append (zfl_list_t *self, void *value);
void
    zfl_list_push (zfl_list_t *self, void *value);
void
    zfl_list_remove (zfl_list_t *self, void *value);
zfl_list_t *
    zfl_list_copy (zfl_list_t *self);
size_t
    zfl_list_size (zfl_list_t *self);
void
    zfl_list_test (int verbose);
----


DESCRIPTION
-----------
Provides a generic container implementing a fast singly-linked list. You
can use this to construct multi-dimensional lists, and other structures
together with other generic containers like zfl_hash.


EXAMPLE
-------
.From zfl_list_test method
----
zfl_list_t *list = zfl_list_new ();
assert (list);
assert (zfl_list_size (list) == 0);

//  Three values we'll use as test data
//  List values are void *, not particularly strings
char *cheese = "boursin";
char *bread = "baguette";
char *wine = "bordeaux";

zfl_list_append (list, cheese);
assert (zfl_list_size (list) == 1);
zfl_list_append (list, bread);
assert (zfl_list_size (list) == 2);
zfl_list_append (list, wine);
assert (zfl_list_size (list) == 3);

assert (zfl_list_first (list) == cheese);
assert (zfl_list_size (list) == 3);
zfl_list_remove (list, wine);
assert (zfl_list_size (list) == 2);

assert (zfl_list_first (list) == cheese);
zfl_list_remove (list, cheese);
assert (zfl_list_size (list) == 1);
assert (zfl_list_first (list) == bread);

zfl_list_remove (list, bread);
assert (zfl_list_size (list) == 0);

zfl_list_push (list, cheese);
assert (zfl_list_size (list) == 1);
assert (zfl_list_first (list) == cheese);

zfl_list_push (list, bread);
assert (zfl_list_size (list) == 2);
assert (zfl_list_first (list) == bread);

zfl_list_append (list, wine);
assert (zfl_list_size (list) == 3);
assert (zfl_list_first (list) == bread);

zfl_list_remove (list, bread);
assert (zfl_list_first (list) == cheese);

zfl_list_remove (list, cheese);
assert (zfl_list_first (list) == wine);

zfl_list_remove (list, wine);
assert (zfl_list_size (list) == 0);

zfl_list_destroy (&list);
assert (list == NULL);
----


SEE ALSO
--------
linkzfl:zfl[7]



