zfl_hash(7)
==========


NAME
----
zfl_hash - expandable hash table container


SYNOPSIS
--------
----
//  Callback function for zfl_hash_foreach method
typedef int (zfl_hash_foreach_fn) (char *key, void *value, void *argument);
//  Callback function for zfl_hash_freefn method
typedef void (zfl_hash_free_fn) (void *data);

zfl_hash_t *
    zfl_hash_new (void);
void
    zfl_hash_destroy (zfl_hash_t **self_p);
int
    zfl_hash_insert (zfl_hash_t *self, char *key, void *value);
void
    zfl_hash_update (zfl_hash_t *self, char *key, void *value);
void
    zfl_hash_delete (zfl_hash_t *self, char *key);
void *
    zfl_hash_lookup (zfl_hash_t *self, char *key);
void *
    zfl_hash_freefn (zfl_hash_t *self, char *key, zfl_hash_free_fn *free_fn);
size_t
    zfl_hash_size (zfl_hash_t *self);
int
    zfl_hash_foreach (zfl_hash_t *self, zfl_hash_foreach_fn *callback, void *argument);
void
    zfl_hash_test (int verbose);
----


DESCRIPTION
-----------
Note that it's relatively slow (~50k insertions/deletes per second), so
don't do inserts/updates on the critical path for message I/O.  It can
do ~2.5M lookups per second for 16-char keys.  Timed on a 1.6GHz CPU.


EXAMPLE
-------
.From zfl_hash_test method
----
zfl_hash_t *hash = zfl_hash_new ();
assert (hash);
assert (zfl_hash_size (hash) == 0);

//  Insert some values
int rc;
rc = zfl_hash_insert (hash, "DEADBEEF", (void *) 0xDEADBEEF);
assert (rc == 0);
rc = zfl_hash_insert (hash, "ABADCAFE", (void *) 0xABADCAFE);
assert (rc == 0);
rc = zfl_hash_insert (hash, "C0DEDBAD", (void *) 0xC0DEDBAD);
assert (rc == 0);
rc = zfl_hash_insert (hash, "DEADF00D", (void *) 0xDEADF00D);
assert (rc == 0);
assert (zfl_hash_size (hash) == 4);

//  Look for existing values
void *value;
value = zfl_hash_lookup (hash, "DEADBEEF");
assert (value == (void *) 0xDEADBEEF);
value = zfl_hash_lookup (hash, "ABADCAFE");
assert (value == (void *) 0xABADCAFE);
value = zfl_hash_lookup (hash, "C0DEDBAD");
assert (value == (void *) 0xC0DEDBAD);
value = zfl_hash_lookup (hash, "DEADF00D");
assert (value == (void *) 0xDEADF00D);

//  Look for non-existent values
value = zfl_hash_lookup (hash, "0xF0000000");
assert (value == NULL);

//  Try to insert duplicate values
rc = zfl_hash_insert (hash, "DEADBEEF", (void *) 0xF0000000);
assert (rc == -1);
value = zfl_hash_lookup (hash, "DEADBEEF");
assert (value == (void *) 0xDEADBEEF);

//  Delete a value
zfl_hash_delete (hash, "DEADBEEF");
value = zfl_hash_lookup (hash, "DEADBEEF");
assert (value == NULL);
assert (zfl_hash_size (hash) == 3);

//  Check that the queue is robust against random usage
struct {
    char name [100];
    Bool exists;
} testset [200];
memset (testset, 0, sizeof (testset));

int
    testmax = 200,
    testnbr,
    iteration;

srandom ((unsigned) time (NULL));
for (iteration = 0; iteration < 25000; iteration++) {
    testnbr = within (testmax);
    if (testset [testnbr].exists) {
        value = zfl_hash_lookup (hash, testset [testnbr].name);
        assert (value);
        zfl_hash_delete (hash, testset [testnbr].name);
        testset [testnbr].exists = FALSE;
    }
    else {
        sprintf (testset [testnbr].name, "%x-%x", rand (), rand ());
        if (zfl_hash_insert (hash, testset [testnbr].name, "") == 0)
            testset [testnbr].exists = TRUE;
    }
}
//  Test 1M lookups
for (iteration = 0; iteration < 1000000; iteration++)
    value = zfl_hash_lookup (hash, "DEADBEEFABADCAFE");

zfl_hash_destroy (&hash);
assert (hash == NULL);
----


SEE ALSO
--------
linkzfl:zfl[7]


